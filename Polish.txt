Polish TODO:
 - Finalize example with resolution settings and proper GUI
  - Ensure that going fullscreen and windowed works fine
 - Mouse movement is release build is too slow
 - Add an example model
 - Test if example shuts down fine

 - Add license text to all files

 - Make a separate release branch with no editor/script stuff, and without .txt files and other development data
  - Name the branch BansheeEnginePreview
  - Before I branch make a separate solution with example only projects
  - Also remove all non-example code (e.g. plugin loading and similar)
  - This is so I can then merge that code back in that branch when ready
  - For other stuff I need to delete, use git permanent delete

 - Add a .zip with dependencies
 - Add a .zip with source and dependencies
 - Test checking out source and extracting dependencies and see if it compiles
 - Test compiling on another PC

Transient meshes never get released. I'm assuming its circular reference MeshBase and MeshProxy have to each-other. Figure out a way to resolve it properly.

-----------------

Not so critical
  - I have a feeling DX9 might start crashing once I resize to sub-fullscreen res and go back to FS - test it
  - Add VSync toggle to RenderWindow if it doesn't already exist.
  - Test creating a fullscreen window on window creation.
  - Refactor GUIElement & GUIElementBase
     - Sprite rendering methods should probably be marked as internal (possibly others too)
       - A lot could be made private
     - Has two methods for retrieveing ElementType
     - getVisibleBounds doesn't make sense
  - There's still a crash regarding an uninitialized mCachedPtr on a C# class when shutting down. Attempt to find consistent repro steps.
  - Perform optimizations as needed to get reasonable performance
  - Consider removing SceneManager from Core? I have two scene manager base classes.
  - GpuParamBlockBuffer and GpuParams::cloneForCore are very clumsy in how they deal in keeping two separate param blocks. Rethink this a bit.
  - Test texture compression and mip generation with DX9 and OpenGL
