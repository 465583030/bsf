
TODO:
 - Core thread gets stuck on shutdown when OpenGL is used...Somewhere in kernel

IMMEDIATE:
 - SceneGrid is very ugly. Consider using default lines for now and come back with a better approach later.
   - Potentially enable line AA?
 - In Picking code I don't set main texture when rendering with alpha
 - Picking code is completely untested and will likely need major fixing
 - Disable DX9 for editor as I will likely want to use geometry shaders for icon rendering, and possibly new AA line shader
   - Or just use MeshHeap and update the icon/lines every frame?
 - Test all the new DrawHelper3D methods

 GIZMO TODO:
  - IMPORTANT: Gizmo rendering happens in update() but it should happen whenever scene view is being rendered as the render target isn't set anywhere
  - Add a method that renders gizmos for picking
  - Figure out how to deal with builtin components like Camera and Renderable (e.g. how will they have gizmos since they're not managed components?)
  - Don't forget to call clearGizmos every frame

LATER:
 - Need a way to render text for gizmos and handles, and in scene in general

----------------------------------------------------------------------
Handles

 - Make a few different base handle types:
   - Slider 1D (e.g. for movement using an arrow cap)
   - Slider 2D (e.g. for movement in 2D using a plane render)
   - Similar for scale/rotation handles  (see Unity for its implementations of those)

Handles should have colliders which will be queries whenever user input is detected in scene view
If any handle is hit the input will not proceed further (e.g. no picking will be done) and that handle control
will become active.

Base handle types should just be positioned in space and then return value every frame as user moves them.
 - This way they can also easily be used from C# for custom user-made stuff

TODO - Think about this
See for inspiration: http://docs.unity3d.com/ScriptReference/Handles.html

----------------------------------------------------------------------
Rendering selection

Get the mesh from the selected Renderable
Draw that same mesh again using a shader that grays out the original
The second mesh will likely need to use depth bias (sloped depth bias too?)