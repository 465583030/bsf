--------- ALL LONG TERM TASKS / FIXES BELONG TO GOOGLE DOCS: ImplementationTODO OR PossibleImprovements ----------

----------------------------------------------------------------------
Polish

Other polish:
 - Add menu items:
  - Edit: Cut/Copy/Paste/Duplicate/Delete(need to make sure it works in Hierarchy, with shortcuts), View/Move/rotate/scale
  - Game Object (also add to context): Create(Empty, Empty Child, Camera, Renderable, Point/Spot/Directional Light), Apply prefab, Break prefab, Revert prefab
 - Inspector persistance (See below for details)
 - Ortographic camera views (+ gizmo in scene view corner that shows camera orientation) (Use custom handles and implement this?)
 - Add tooltips to toolbar items and other buttons with icons
 - Undo/Redo
  - CmdRecordSO records an SO and all its children but it should only record a single SO
  - CmdRecordSO should instead of recording the entire object record a diff
  - There should be a CmdRecordSO equivalent for resources (probably)
  - Add commands for breaking or reverting a scene object 
  - Test & finalize undo/redo system
 - Drag and drop of a mesh into Hierarchy doesn't instantiate it
 - Drag and dropping a prefab onto the scene (or hierarchy) should work the same as with meshes
 - Start editor in fullscreen
 - If user clears the default shader he has no way of re-assigning it - add default shader to project folder? (needs to be packaged with project)
 - Toggle to enable/disable SceneObject in Inspector (+ Fade out disabled objects in hierarchy)
 - Resource import options don't get saved
 - Cursors should be replaced with better ones, or at least hot-spots fixed
 - Either disable light tool icons before release or make them functional (With gizmos)

Finalizing:
 - Add copyright notices in all files & change license to GPL
 - Need to generate a proper merge of dev and preview branches
   - Use "git revert --no-commit <COMMITID>..HEAD" to reverse anything on the preview branch that was done after the branch creation, then merge
   - Consider moving dev to that branch completely and just marking the release with a tag (this might mean I just need to move the master branch to that repo instead of merging)
 - Test if C++ example still works
 - Add "example" for using the editor (possibly a video, or a set of screenshots + a data.rar with required resources)
 - Make sure to include BansheeOIS source in dependencies.

----------------------------------------------------------------------
Inspector persistance

 - When I expand inspector elements and them come back to that object it should remember the previous state
   - In the Inspector base add a dictionary "Persistent<string, object>"
   - InspectorWindow will keep a reference to this dictionary whenever it creates a new inspector for SO or resource
    - Or if one already exists it will restore it
	- This dictionary will not persist editor shutdown
   - Generic inspector and inspectable fields can use the serialized property name for the key
    - Will need a way to retrieve the full property name, up to the parent Component/Resource
	- Will need to extend inspectable fields so they know their parent inspector so they have access to the dictionar
   - Custom inspectors can get rid of manual "isExpanded" bools and use the dictionary instead

/*********************************************************************/
/************************ LESS IMPORTANT *****************************/
/*********************************************************************/

----------------------------------------------------------------------
Mono notes

I can get mono errors by checking g_print calls in goutput.c
 - Calling thunks incorrectly can cause those weird errors with no real callstack

Running embedded mono with VS attached causes managed null refs to be registered as access violations

There seems to be a bug in Mono when passing complex structs from C# to C++. e.g. passing Rect3 as a parameter
will corrupt the parameter after it, even if layout and size is exact as the C++ version. 
Rect3 has child structs (Vector3) which could be the reason. Be aware of other similar problems.

Mono cannot marshal structures? Taken from their documentation:
 Internal calls do not provide support for marshalling structures. This means that any API calls that take a structure 
 (excluding the system types like int32, int64, etc) must be passed as a pointer, in C# this means passing the value as a "ref" or "out" parameter.
 - This was further confirmed by one of the developers on a forum.

Mono has problems with returning a struct from an internal C++ method. Returned value might end up being corrupted. It works weirdly as
I am able (for example) return a Rect2 with no problems, but it doesn't work when returning a Degree struct. Returning the value as input
parameter solves the problem (presumably boxing the return value would also work).

Sometimes exceptions cause a crash in Event, although this is due to an exception triggering a dialog box which triggers
the message loop and causes another exception. Make sure to look for the original exception.

Finalizers on attribute members will get called more than once. This causes issues if some of the members reference native 
objects as already deleted native objects will try to be deleted again. 

----------------------------------------------------------------------
C# Material/Shader

TODO - Implement param block and sampler support
TODO - When creating a Material without a shader, a default one should be used, at least in editor
TODO - Setting Material array parameters isn't possible from C#
