--------- ALL LONG TERM TASKS / FIXES BELONG TO GOOGLE DOCS: ImplementationTODO OR PossibleImprovements ----------

----------------------------------------------------------------------
Assembly refresh

When serializing Camera I cannot save the reference to RenderTexture. Make it a Resource?
Possibly set up automatic refresh in debug mode after initialization? As an ad-hoc unit test

----------------------------------------------------------------------
Project library

Almost all of PRojectLibrary functionality is completely untested

ProjectLibrary needs a method that searches for all entries with a specific name (or a subset of a name), and all entries of a specific type
 - Can I make Library/Resource entries faster so I can do this properly from C#?

Figure out how to create a C# BuiltinResources class. It should be able to load arbitrary resources from a non-project folder
 - I should move all the GUI element style creation out of code and make it just pure data (once I have an editor for it)
 - Will also need a debug button to reimport all the built-in resources

----------------------------------------------------------------------
VisualStudio integration

None of the new VS functionality has been tested
VS integration will likely not work with VSExpress or Community edition
 - VSExpress doesn't support EnvDTE so the only option is to open it using a shell command which doesn't seem to offer precise parameters
 - Community edition should work similarily to Pro, but might have a different executable and/or registry paths

Test:
 - If string::format works
 - If VS open and sync works

For later:
 - Make sure that 3rd party assemblies can be imported in the project, and that they are properly referenced in VS project generation

----------------------------------------------------------------------
BuiltinResources
 - All data in ..\..\BuiltinData (if we start in /bin/Release/BansheeEd.exe)
 - Need BuiltinEngine and BuiltinEditor (separate classes) that internally do pretty much the same thing
   - Derive them from common base since most of the functionality will be reused
   - Make sure that commonly used resources are available directly and aren't required to call Load
 - Also have ..\..\RawBuiltinData where all the non-processed assets are
 - When compiled as debug, define Preprocess command which goes over all assets in ..\..\RawBuiltinData, imports them and outputs them to ..\..\BuiltinData
   - Preprocess can be done fully in C++

I need to make a GUISkin a resource so I can save it
 - It should be editable from the Editor (only when in debug mode) and not generated in code
 - Then in Preprocess it can just get copied from RawBuiltinData subfolder to the actual folder
 - Before I have editing capability it can just be generated in Preprocess step

Preprocess will also need to generate any Shaders or SpriteTextures
 - POSSIBLY wait until I get generate these assets directly in Editor, then just copy them over to Builtin
 - This way I can fully avoid writing any preprocess code

I still need to be able to access most of these assets from C++ (e.g. GUI element styles)
 - I need to add BuiltinResources.Load which should allow me to load all needed resources, from C++ or C#

----------------------------------------------------------------------
Resources
 - Load/Unload/UnloadUnused
 - Uses same paths as ProjectLibrary
 - It uses different logic depending on Application.isEditor
   - If not in editor then a different path is used
   - That path is ..\..\Data (relative to the executable)
   - When in editor it also does special ProjectLibrary check to ensure that resource is included in final project
 - Internally just calls Resources (C++) Load/Unload/UnloadUnused
 - Need a flag in ProjectLibrary to include a resource in the final build
   - Need to be able to set that flag from C# (Likely through ProjectLibrary) interface
 - The final build procedure for the game would then be:
   - Copy all the prebuilt binaries (Banshee libraries, Banshee assemblies, 3rd party libraries and prebuilt executable) from Editor install folder to output folder
    - Which set of binaries is used depends on selected platform (e.g. win/mac/linux or 32/64bit)
   - Recompile script assemblies if needed and copy them from project Internal folder to output folder
   - Copy the Builtin resources for engine from Editor install folder to output folder
   - Copy all the resources marked with the flag mentioned above to \Data subfolder in the output folder, preserving the same asset structure

----------------------------------------------------------------------
Simple stuff

C#:
Dialog.Show(title, text, btn1 text, btn1 callback, btn2 text, btn2 callback, btn3 text, btn3 callback)

ColorPicker
 - Sliders don't show up

Other simple stuff:
 - VS integration (open VS project on doubleclick, generate project files, open on specific line)
 - C# wrapper for GUISkin (and a way to assign the current skin to a window)
 - Need to add IsPointerDoubleClicked to Input (C++ and C#)
 - Move all the code files into subfolders so their hierarchy is similar to VS filters
 - Get rid of PoolAlloc and other unused allocators (plus fix bs_new and others which have weird overloads)

----------------------------------------------------------------------
Handles

When scaling using center make sure to offset the object before scale
Handles should probably not having shading, or have better shading.

Rotate handle:
 - How to handle local/global with rotate handle?
   - This maybe just determines initial rotation of the handle?
   - I don't think my code properly handles rotation handle transforms (e.g. arc drawing)

Ideally free scale handle indicator should always render and be interactable and never be hidden by axis scale indicators (Not high priority)

----------------------------------------------------------------------
Scene View

IMPROVE SceneGrid LOOK - Use the shader created in Unity

AFTER I have scene widget in C#:
 - Test custom handles from C#
 - Test handle snapping

Need a way to drag and drop items from Scene tree view to Scene view
 - When dragging a mesh it should by default create a SceneObject with a renderable
 - I might want a C# DragAndDrop class? It can contain Resource or SceneObject only for now, similar to Selection

----------------------------------------------------------------------
Other

Got a crash on shutdown that was caused by locking a mutex in an Event destructor. Event was Platform::onMouseCaptureChanged. 
Issue happened when I closed the app via the X button (if that's relevant). It doesn't seem to happen always.

Create a stack allocatable custom vector implementation and make getResourceDependencies and getCoreDependencies use it.
 - These methods are called often and cause allocations whenever they are.

Add ProjectWindow and HierarchyWindow to C#
 - Make TreeViews a C# element?
Set up a default layout and save it

----------------------------------------------------------------------
Multi-resource saving
 - Modify Font so it doesn't contain a texture, but instead keeps a handle to it
 - Register it in its meta file
 - When saving such a resource with dependencies save the contained files to a sub-directory with the same name as top level resource
   - If it already exists in the manifest at a different location do it anyway, keep the other copy as-is in case user wanted it that way
   - I'm not sure whether to do this for all Resource::save calls or only ones originating from ProjectLIbrary?

----------------------------------------------------------------------
Mono notes

I can get mono errors by checking g_print calls in goutput.c
 - Calling thunks incorrectly can cause those weird errors with no real callstack

Running embedded mono with VS attached causes managed null refs to be registered as access violations

There seems to be a bug in Mono when passing complex structs from C# to C++. e.g. passing Rect3 as a parameter
will corrupt the parameter after it, even if layout and size is exact as the C++ version. 
Rect3 has child structs (Vector3) which could be the reason. Be aware of other similar problems.

Mono cannot marshal structures? Taken from their documentation:
 Internal calls do not provide support for marshalling structures. This means that any API calls that take a structure 
 (excluding the system types like int32, int64, etc) must be passed as a pointer, in C# this means passing the value as a "ref" or "out" parameter.

----------------------------------------------------------------------
SelectionRenderer

Retrieve a list of selected objects from SelectionManager
Find ones with Renderable components
Retrieve Meshes, and world transforms from them
Draw that same mesh with either a wireframe or a grayed out shader with a slight depth bias