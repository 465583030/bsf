Update C# GUIElementStyle

TODO:
 - Hook up int field set/get callbacks
    - Ensure int field isn't updated from app when in focus
 - Hook up foldout expand/collapse callbacks
 - Think about how to handle arrays, adding and deleting elements from them.
   - Will likely need GUILayout::GetElementIndex()
 - I should add project and scene tree views to the main editor window to make inspector testing easier
 - Entire foldout should be clickable, not just the toggle button
 - Extend text field so it can be multi-line
 - Port to C#:
   - IntField
   - FloatField
   - ColorField
   - ToggleField
   - TextField
   - Vector2Field
   - Vector3Field
   - Vector4Field
   - GameObjectField
   - ResourceField
 - Ensure get/set value from inspector fields works 
 - Add array fields and ensure they work/update properly
 - Extend GameObject field so it can only accept a certain type
 - Ensure Undo/redo works as intended
   - This task needs decomposing. Likely need to port UndoRedo to C# first.
 - GUIColor needs to be hooked up to a window that actually changes its value.
 - Need to add GUIResourceField along with GUIGameObjectField and figure out a way to make them
   accept arbitrary types.
     - Probably move them to SBansheeEditor
 - I need to register UndoRedo command after user finishes modifying a field. This should be referencing an object using an URI?

TO PONDER:
 - How to limit resource/object fields to a custom type (user created type possibly)
 - Need to figure out a better way of setting styles for container GUI elements (e.g. GUIFoldout requires three different styles)

KEEP IN MIND:
 - Clicking on an object/resource in inspector should ping it in their window
 - Inspector needs to be organized in such a way that scroll areas work. That should be possible with GUIPanelContainer.
 - When inspector object changes I need to rebuild that inspector element
   - This can happen if user drags a new object
   - Or while the application is running objects might change from code
     - Technically objects will never change their structure during runtime, this is only relevant for array sizes
 - Modify C++ Editor fields so that calling setValue doesn't update the visual value until focus is lost
  - When user is currently writing in an input box I don't want refresh to overwrite that value.























----------------------------------------------

LATER:
 - Add support for list, dictionary and multi-rank array types
 - Add tabbing between fields

A way to close a window & destroy a GUI panel!
 - Will likely need to refactor ScriptEditorWindow as currently it performs initialization
   in constructor and destroy in destructor, but open/close will be called within its lifetime
 - Also a way to get notified if the window gets closed from C++
 - Once closed the referenced GUIPanels should no longer work (set "destroyed" flag?)
 - What about calling Destroy on a GUIPanel?
   - It should notify owning EditorWindow

Ensure that setting depth for GUIArea works properly. It's not properly implemented yet.

UndoRedo should work on URI type basis where it remembers object ID, and path across its fields to the field that was modified
 - This way it wont keep an unnecessary reference to object
 - SerializableField should probably be the type responsible for handling the URI
 - Will I need two different URI types for resources and scene objects?
   - Probably, resources don't need hierarchies, but I think I should ignore resources for now as I'm not sure they will be using Inspectable system
 - When trying to undo/redo and object id cannot be found, it just skips it
 - When recompiling clear the undo/redo queue

 ----------------------

 Non-inspector:
  - Deleting first entry in input field moves the cursor incorrectly
  - Test if parsing int/float value from int/float field actually works
  - ProfilerOverlay elements are constantly dirty? even though I'm not calling update

Undocking a window wont remove the tabbed title bar
While dragging an undocked window, dropping it over the main window (not over dock overlays) will not restore it

 - GameObjectField
   - When dragging over GameObjectField cursor needs to change depending whether drop will be accepted or not
   - How will I limit it to just certain component types?

Add InsertElement to GUILayout