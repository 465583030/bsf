Parameters =
{
	mat4x4		gMatWorldViewProj;
	float4		gColorIndex;
	float		gAlphaCutoff;
};

Blocks =
{
	Block Uniforms : auto("GizmoUniforms");
};

Technique : base("PickingCull") =
{
	Language = "HLSL11";
	
	Pass =
	{
		Scissor = true;
		
		Common =
		{
			cbuffer Uniforms
			{
				float4x4 	gMatWorldViewProj;
				float4		gColorIndex;
				float		gAlphaCutoff;
			}
		};		

		Vertex =
		{
			void main(
				in float3 inPos : POSITION,
				in float3 inNorm : NORMAL,
				out float4 oPosition : SV_Position,
				out float4 oNorm : NORMAL)
			{
				oPosition = mul(gMatWorldViewProj, float4(inPos.xyz, 1));
				oNorm = float4(inNorm, 0);
			}
		};
		
		Fragment =
		{
			float4 main(
				in float4 inPos : SV_Position,
				in float4 inNorm : NORMAL,	
				out float4 oNorm : SV_Target1
			) : SV_Target0
			{
				oNorm = (inNorm + float4(1,1,1,0)) / 2;
				return gColorIndex;
			}
		};
	};
};

Technique : base("PickingCull") =
{
	Language = "GLSL";
	
	Pass =
	{
		Scissor = true;
		
		Common =
		{
			layout(binding = 0, std140) uniform Uniforms
			{
				mat4 	gMatWorldViewProj;
				vec4	gColorIndex;
				float	gAlphaCutoff;
			};
		};

		Vertex =
		{
			layout(location = 0) in vec3 bs_position;
			layout(location = 1) in vec3 bs_normal;
			
			layout(location = 0) out vec4 normal;
			
			out gl_PerVertex
			{
				vec4 gl_Position;
			};
			
			void main()
			{
				normal = vec4(bs_normal,0);
				gl_Position = gMatWorldViewProj * vec4(bs_position.xyz, 1);
			}
		};
		
		Fragment =
		{
			layout(location = 0) in vec4 normal;
			layout(location = 0) out vec4[2] outColor;

			void main()
			{
				outColor[0] = gColorIndex;
				outColor[1] = (normal + vec4(1,1,1,0)) / 2;
			}
		};
	};
};
