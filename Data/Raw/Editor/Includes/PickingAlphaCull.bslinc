Parameters =
{
	mat4x4		gMatWorldViewProj;
	color		gColorIndex;
	float		gAlphaCutoff;
	
	Sampler2D 	gMainTexSamp : alias("gMainTexture");
	Texture2D 	gMainTexture;	
};

Blocks =
{
	Block Uniforms : auto("PickingUniforms");
};

Technique : base("PickingAlphaCull") =
{
	Language = "HLSL11";
	
	Pass =
	{
		Scissor = true;

		Common =
		{
			cbuffer Uniforms
			{
				float4x4 	gMatWorldViewProj;
				float4		gColorIndex;
				float		gAlphaCutoff;
			}
		};			
		
		Vertex =
		{
			void main(
				in float3 inPos : POSITION,
				in float3 inNorm : NORMAL,
				in float2 uv : TEXCOORD0,
				out float4 oPosition : SV_Position,
				out float4 oNorm : NORMAL,
				out float2 oUv : TEXCOORD0)
			{
				oPosition = mul(gMatWorldViewProj, float4(inPos.xyz, 1));
				oNorm = float4(inNorm, 0);
				oUv = uv;
			}
		};
		
		Fragment =
		{
			SamplerState gMainTexSamp : register(s0);
			Texture2D gMainTexture : register(t0);

			float4 main(
				in float4 inPos : SV_Position,
				in float4 inNorm : NORMAL,
				in float2 uv : TEXCOORD0,
				out float4 oNorm : SV_Target1) : SV_Target0
			{
				float4 color = gMainTexture.Sample(gMainTexSamp, uv);
				oNorm = (inNorm + float4(1,1,1,0)) / 2;
				if(color.a < gAlphaCutoff)
					discard;
				
				return gColorIndex;
			}
		};
	};
};

Technique : base("PickingAlphaCull") =
{
	Language = "GLSL";
	
	Pass =
	{
		Scissor = true;

		Common =
		{
			layout(binding = 0, std140) uniform Uniforms
			{
				mat4 	gMatWorldViewProj;
				vec4	gColorIndex;
				float	gAlphaCutoff;
			};
		};		
		
		Vertex =
		{		
			layout(location = 0) in vec3 bs_position;
			layout(location = 1) in vec2 bs_texcoord0;
			layout(location = 2) in vec3 bs_normal;
			
			layout(location = 0) out vec4 normal;
			layout(location = 1) out vec2 texcoord0;

			out gl_PerVertex
			{
				vec4 gl_Position;
			};
						
			void main()
			{
				gl_Position = gMatWorldViewProj * vec4(bs_position.xyz, 1);
				texcoord0 = bs_texcoord0;
				normal = vec4(bs_normal, 0);
			}
		};
		
		Fragment =
		{
			layout(location = 0) in vec4 normal;
			layout(location = 1) in vec2 texcoord0;		
		
			layout(location = 0) out vec4[2] outColor;

			layout(binding = 2) uniform sampler2D gMainTexture;

			void main()
			{
				vec4 color = texture2D(gMainTexture, texcoord0);
				if(color.a < gAlphaCutoff)
					discard;
					
				outColor[0] = gColorIndex;
				outColor[1] = (normal + vec4(1,1,1,0)) / 2;	
			}
		};
	};
};
